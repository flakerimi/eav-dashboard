{"version":3,"sources":["components/Group.js","components/Set.js"],"names":["Panel","styled","div","_templateObject","Header","_templateObject2","Content","_templateObject3","Drag","icon","_templateObject4","Edit","es_button","_templateObject5","Item","_templateObject6","GroupPanel","this","props","dispatch","listGroupsAttributes","params","entity","set","group","get","_this","index","react_default","a","createElement","react_beautiful_dnd_esm","key","draggableId","concat","provided","snapshot","Object","assign","ref","innerRef","draggableProps","type","dragHandleProps","shape","size","onClick","edit","divider","popconfirm","title","onConfirm","delete","style","color","droppableId","direction","skeleton","active","loading","attributes","map","item","placeholder","PureComponent","connect","state","ownProps","selectGroupAttributes","app","getIn","AddGroup","lazy","Promise","all","__webpack_require__","e","then","bind","EditGroup","AttributeList","AddAttribute","Container","Set_templateObject","GroupPanelWrapper","Set_templateObject2","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","slicedToArray","updateSequence","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","Set","subDrawer","subDrawerContent","subDrawerTitle","subDrawerData","getAttributes","updateAttributes","reloadAttributeList","componentDidMount","listGroups","id","canClose","hasChanges","onClose","dataChanged","changed","addGroup","setState","editGroup","name","updateIndex","deleteGroup","_callee","removeIndex","hide","_message2","description","regenerator_default","wrap","_context","prev","next","objectSpread","message","groups","toJS","find","getGroupAttr","forEach","attribute","removeGroup","success","onSave","t0","error","errors","detail","notification","duration","stop","onCancel","close","_callee2","_message3","_context2","sequence","presistSetRegroup","status","addAttribute","onSubDrawerClose","onAddtributeAdd","getDrawerContent","content","onAdd","sortGroups","items","isEqual","toArray","reorderSet","sortAttributes","_source$droppableId$s","split","_source$droppableId$s2","saveGroupAttributes","moveAttribute","_destination$droppabl","_destination$droppabl2","removeAttribute","_source$droppableId$s3","_source$droppableId$s4","reGroup","_source$droppableId$s5","_source$droppableId$s6","sid","_destination$droppabl3","_destination$droppabl4","did","sAttributes","dAttributes","onDragEnd","_this2","react","Responsive","Consumer","drawer","placement","maskClosable","width","closable","visible","fallback","FallbackLoading","row","col","span","md","loadingGroup","empty","textAlign","marginRight","Group","call","reload","position","left","bottom","borderTop","padding","background","disabled","selectAttributes","selectGroups"],"mappings":"iyDASA,IAAMA,EAAQC,IAAOC,IAAVC,KAQLC,EAASH,IAAOC,IAAVG,KAQNC,EAAUL,IAAOC,IAAVK,KAMPC,EAAOP,YAAOQ,EAAA,EAAPR,CAAHS,KAiBJC,EAAOV,YAAOW,EAAA,EAAPX,CAAHY,KAKJC,EAAOb,IAAOC,IAAVa,KASJC,8LAGEC,KAAKC,MAAMC,SAASC,YAAqB,CAAEC,OAAQ,CAAEC,OAAQL,KAAKC,MAAMI,OAAQC,IAAKN,KAAKC,MAAMK,IAAKC,MAAOP,KAAKC,MAAMM,MAAMC,IAAI,2CAG5H,IAAAC,EAAAT,KACCO,EAAQP,KAAKC,MAAMM,MACnBG,EAAQV,KAAKC,MAAMS,MACzB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,IAAKR,EAAMC,IAAI,MAAOQ,YAAW,SAAAC,OAAWV,EAAMC,IAAI,OAASE,MAAOA,GAC5E,SAACQ,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAAC9B,EAADqC,OAAAC,OAAA,CAAOC,IAAKJ,EAASK,UAAcL,EAASM,gBACxCb,EAAAC,EAAAC,cAAC1B,EAAD,KACIwB,EAAAC,EAAAC,cAACtB,EAAD6B,OAAAC,OAAA,CAAMI,KAAK,QAAWP,EAASQ,kBAC/Bf,EAAAC,EAAAC,cAAA,YAAON,EAAMC,IAAI,SACjBG,EAAAC,EAAAC,cAACnB,EAAD,CAAM+B,KAAK,SAASE,MAAM,SAASnC,KAAK,OAAOoC,KAAK,QAAQC,QAAS,kBAAMpB,EAAKR,MAAM6B,KAAKvB,EAAMC,IAAI,MAAOD,EAAMC,IAAI,QAASE,MAC/HC,EAAAC,EAAAC,cAAAkB,EAAA,GAASN,KAAK,aACdd,EAAAC,EAAAC,cAAAmB,EAAA,GACIC,MAAM,kBACNC,UAAW,kBAAMzB,EAAKR,MAAMkC,OAAO5B,EAAMC,IAAI,MAAOE,KAEpDC,EAAAC,EAAAC,cAAArB,EAAA,GAAMiC,KAAK,SAASW,MAAO,CAAEC,MAAO,WAG5C1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWwB,YAAW,SAAArB,OAAWV,EAAMC,IAAI,OAASiB,KAAK,aAAac,UAAU,cAC3E,SAACrB,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAACxB,EAAD,CACIiC,IAAKJ,EAASK,UAEdZ,EAAAC,EAAAC,cAAA2B,EAAA,GAAUC,QAAM,EAACC,QAASjC,EAAKR,MAAMyC,SAChCjC,EAAKR,MAAM0C,WAAWC,IAAI,SAACC,EAAMnC,GAAP,OACvBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,IAAK8B,EAAKrC,IAAI,MAAOQ,YAAW,QAAAC,OAAU4B,EAAKrC,IAAI,OAASE,MAAOA,GACzE,SAACQ,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAAChB,EAADuB,OAAAC,OAAA,CACIC,IAAKJ,EAASK,UACVL,EAASM,eACTN,EAASQ,iBAHjB,GAAAT,OAKQ4B,EAAKrC,IAAI,kBALjB,MAAAS,OAKuC4B,EAAKrC,IAAI,kBALhD,UAUXU,EAAS4B,0BA5CzBC,iBAgEVC,kBARf,SAAyBC,EAAOC,GAC5B,MAAO,CACLP,WAAYQ,YAAsBF,EAAOC,EAAS3C,MAAMC,IAAI,OAC5DkC,QAASO,EAAMG,IAAIC,MAAM,CAAC,SAAU,aAAcH,EAAS3C,MAAMC,IAAI,MAAO,cAKnEwC,CAAyBjD,sOC5GxC,IAAMuD,GAAWC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACtBC,GAAYP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aACvBE,GAAgBR,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC3BG,GAAeT,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAE1BI,GAAYjF,IAAOC,IAAViF,MAITC,GAAoBnF,IAAOC,IAAVmF,KAKjBC,GAAU,SAACC,EAAMC,EAAYC,GAC/B,IAAIC,EAASC,MAAMC,KAAKL,GADoBM,EAE1BH,EAAOI,OAAON,EAAY,GAArCO,EAFqC1D,OAAA2D,EAAA,EAAA3D,CAAAwD,EAAA,MAI5C,OADAH,EAAOI,OAAOL,EAAU,EAAGM,GACpBE,YAAeP,IAMpBQ,GAAO,SAACC,EAAQC,EAAaC,EAAiBC,GAChD,IAAMC,EAAcZ,MAAMC,KAAKO,GAC3BK,EAAYb,MAAMC,KAAKQ,GAF8CK,EAGvDF,EAAYT,OAAOO,EAAgB1E,MAAO,GAArDoE,EAHkE1D,OAAA2D,EAAA,EAAA3D,CAAAoE,EAAA,MAIzED,EAAUV,OAAOQ,EAAqB3E,MAAO,EAAGoE,GAEhD,IAAML,EAAS,GAKf,OAJAA,EAAOW,EAAgB9C,aAAegD,EACtCb,EAAOY,EAAqB/C,aAAe0C,YAAeO,GAC1Dd,EAAM,MAAYK,EAEXL,GAGLgB,8MAEFxC,MAAQ,CACJyC,WAAW,EACXC,iBAAkB,KAClBC,eAAgB,KAChBC,cAAe,GACfnD,SAAS,KAGboD,cAAgB,iBAAM,MACtBC,iBAAmB,kBAAM,QACzBC,oBAAsB,kBAAM,QAE5BC,kBAAoB,WAChBxF,EAAKR,MAAMC,SAASgG,YAAW,CAAE9F,OAAQ,CAAEC,OAAQI,EAAKR,MAAMI,OAAQC,IAAKG,EAAKR,MAAMK,IAAI6F,OAE1F1F,EAAKR,MAAMmG,SAAS,kBAAO3F,EAAKR,MAAMoG,aAEtC5F,EAAKR,MAAMqG,QAAQ,kBAAM7F,EAAKR,MAAMC,SAASqG,YAAY,CAAE9E,KAAM,eAAgB+E,SAAS,UAG9FC,SAAW,WACPhG,EAAKiG,SAAS,CACVf,iBAAkB,WAClBC,eAAgB,YAChBF,WAAW,OAInBiB,UAAY,SAACR,EAAIS,EAAMC,GACnBpG,EAAKiG,SAAS,CACVf,iBAAkB,YAClBC,eAAgB,aAChBC,cAAe,CACXM,KAAIS,OAAMC,eAEdnB,WAAW,OAInBoB,kDAAc,SAAAC,EAAOZ,EAAIa,GAAX,IAAAC,EAAA1G,EAAA2G,EAAAC,EAAA,OAAAC,EAAAxG,EAAAyG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACV/G,EAAKiG,SAAS,SAACzD,GACX,OAAO7B,OAAAqG,EAAA,EAAArG,CAAA,GACF6B,EADL,CAEEP,SAAS,MAITuE,EAAOS,EAAA,EAAQhF,QAAQ,aAAc,GARjC4E,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAYAV,YAAY,CAAEzG,OAAQI,EAAKR,MAAMI,OAAQC,IAAKG,EAAKR,MAAMK,IAAI6F,GAAI5F,MAAO4F,IAZxE,cAcNc,IAEM1G,EAAQE,EAAKR,MAAM0H,OAAOC,OAAOC,KAAK,SAAAtH,GACxC,OAAOA,EAAM4F,KAAOA,IAGxB1F,EAAKR,MAAM6H,aAAavH,EAAM4F,IAAI4B,QAAQ,SAAAC,GACtCvH,EAAKsF,iBAAiBiC,GAAW,KAGrCvH,EAAKR,MAAMC,SAAS+H,YAAY,CAAE3H,IAAKG,EAAKR,MAAMK,IAAI6F,GAAIa,iBAE1DU,EAAA,EAAQQ,QAAQ,iBAAkB,GA1B5BZ,EAAAE,KAAA,GA4BA/G,EAAK0H,SA5BL,QAAAb,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SAiCY,YAAfA,EAAAc,GAAM3G,MACLiG,EAAU,gBACVP,EAAcG,EAAAc,GAAMV,SAED,WAAfJ,EAAAc,GAAM3G,OACViG,EAAUJ,EAAAc,GAAMC,MAAMC,OAAO,GAAGrG,MAChCkF,EAAcG,EAAAc,GAAMC,MAAMC,OAAO,GAAGC,QAGxCtB,IAEAuB,EAAA,EAAaH,MAAM,CACfX,UACAP,cACAsB,SAAU,IAGdhI,EAAKiG,SAAS,SAACzD,GACX,OAAO7B,OAAAqG,EAAA,EAAArG,CAAA,GACF6B,EADL,CAEEP,SAAS,MArDT,yBAAA4E,EAAAoB,SAAA3B,EAAA,4EA2Dd4B,SAAW,WACPlI,EAAKR,MAAM2I,WAGfT,4BAAS,SAAAU,IAAA,IAAA5B,EAAAU,EAAAmB,EAAA3B,EAAA,OAAAC,EAAAxG,EAAAyG,KAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAEL/G,EAAKiG,SAAS,SAACzD,GACX,MAAO,CACHP,SAAS,KAIXuE,EAAOS,EAAA,EAAQhF,QAAQ,mBAAoB,GAIjDiF,GAFIA,EAAS3C,YAAevE,EAAKR,MAAM0H,SAEvBC,OAAOhF,IAAI,SAAArC,GACvB,IAAMoC,EAAaqC,YAAevE,EAAKR,MAAM6H,aAAavH,EAAM4F,KAAKvD,IAAI,SAAAoF,GACrE,MAAO,CACH7B,GAAI6B,EAAUxH,IAAI,MAClBiB,KAAMuG,EAAUxH,IAAI,QACpBwI,SAAUhB,EAAUxH,IAAI,eAMhC,OAFAD,EAAK,WAAiBoC,EAAWiF,OAE1BrH,IAvBNwI,EAAAxB,KAAA,EAAAwB,EAAAvB,KAAA,EA2BKyB,YAAkB,CAAE5I,OAAQI,EAAKR,MAAMI,OAAQC,IAAKG,EAAKR,MAAMK,IAAI6F,IAAMwB,EAAQ,IA3BtF,OA6BDlH,EAAKR,MAAMC,SAASqG,YAAY,CAAE9E,KAAM,eAAgB+E,SAAS,KAEjES,IAEAS,EAAA,EAAQQ,QAAQ,2BAjCfa,EAAAvB,KAAA,iBAAAuB,EAAAxB,KAAA,GAAAwB,EAAAX,GAAAW,EAAA,SAqCiB,YAAfA,EAAAX,GAAM3G,MACLiG,EAAU,gBACVP,EAAc4B,EAAAX,GAAMV,SAED,WAAfqB,EAAAX,GAAM3G,MAAsC,MAAjBsH,EAAAX,GAAMc,SACrCxB,EAAUqB,EAAAX,GAAMC,MAAMC,OAAO,GAAGrG,MAChCkF,EAAc4B,EAAAX,GAAMC,MAAMC,OAAO,GAAGC,QAExCC,EAAA,EAAaH,MAAM,CACfX,UACAP,cACAsB,SAAU,IAhDb,QAoDLhI,EAAKiG,SAAS,SAACzD,GACX,MAAO,CACHP,SAAS,KAtDZ,yBAAAqG,EAAAL,SAAAG,EAAA,oBA2DTM,aAAe,WACX1I,EAAKiG,SAAS,CACVf,iBAAkB,eAClBC,eAAgB,gBAChBF,WAAW,OAInB0D,iBAAmB,WACf3I,EAAKiG,SAAS,CACVhB,WAAW,EACXC,iBAAkB,KAClBC,eAAgB,UAIxByD,gBAAkB,WACd5I,EAAKuF,yBAGTsD,iBAAmB,WACf,IAAIC,EACJ,OAAO9I,EAAKwC,MAAM0C,kBACd,IAAK,WACD4D,EAAU5I,EAAAC,EAAAC,cAACyC,GAADlC,OAAAC,OAAA,CAAUhB,OAAQI,EAAKR,MAAMI,OAAQC,IAAKG,EAAKR,MAAMK,IAAKsI,MAAOnI,EAAK2I,kBAAsB3I,EAAKwC,MAAM4C,gBACrH,MACA,IAAK,YACD0D,EAAU5I,EAAAC,EAAAC,cAACiD,GAAD1C,OAAAC,OAAA,CAAWhB,OAAQI,EAAKR,MAAMI,OAAQC,IAAKG,EAAKR,MAAMK,IAAKsI,MAAOnI,EAAK2I,kBAAsB3I,EAAKwC,MAAM4C,gBACtH,MACA,IAAK,eACD0D,EAAU5I,EAAAC,EAAAC,cAACmD,GAAD5C,OAAAC,OAAA,CAAchB,OAAQI,EAAKR,MAAMI,OAAQuI,MAAOnI,EAAK2I,iBAAkBI,MAAO/I,EAAK4I,iBAAqB5I,EAAKwC,MAAM4C,gBACjI,MACA,QACI0D,EAAU,KAElB,OAAOA,KAGXE,WAAa,SAACvE,EAAQC,GAClB,IAAMuE,EAAQrF,GACV5D,EAAKR,MAAM0H,OACXzC,EAAOxE,MACPyE,EAAYzE,OAGZiJ,IAAQD,EAAOjJ,EAAKR,MAAM0H,OAAOiC,YACjCnJ,EAAKR,MAAMC,SAAS2J,YAAW,CAAEvJ,IAAKG,EAAKR,MAAMK,IAAI6F,GAAIwB,OAAQ+B,QAIzEI,eAAiB,SAAC5E,EAAQC,GAAgB,IAAA4E,EAEjB7E,EAAO5C,YAAY0H,MAAM,KAFRC,EAAA7I,OAAA2D,EAAA,EAAA3D,CAAA2I,EAAA,GAExB5D,GAFwB8D,EAAA,GAAAA,EAAA,IAIhCtH,EAAalC,EAAKR,MAAM6H,aAAa3B,GAErCuD,EAAQrF,GACV1B,EACAuC,EAAOxE,MACPyE,EAAYzE,OAGZiJ,IAAQD,EAAO/G,EAAWiH,YAC1BnJ,EAAKR,MAAMC,SAASgK,YAAoB,CAAE/D,KAAIxD,WAAY+G,QAIlES,cAAgB,SAACjF,EAAQC,GAAgB,IAAAiF,EAEhBjF,EAAY7C,YAAY0H,MAAM,KAFdK,EAAAjJ,OAAA2D,EAAA,EAAA3D,CAAAgJ,EAAA,GAEvBjE,GAFuBkE,EAAA,GAAAA,EAAA,IAI/B1H,EAAalC,EAAKR,MAAM6H,aAAa3B,GAErC1B,EAASQ,GACXxE,EAAKqF,gBACLnD,EACAuC,EACAC,GAGJ1E,EAAKR,MAAMC,SAASgK,YAAoB,CAAE/D,KAAIxD,WAAY8B,EAAM,SAAAxD,OAAUkF,OAE1E1F,EAAKsF,iBAAiBtB,EAAM,UAGhC6F,gBAAkB,SAACpF,EAAQC,GAAgB,IAAAoF,EAElBrF,EAAO5C,YAAY0H,MAAM,KAFPQ,EAAApJ,OAAA2D,EAAA,EAAA3D,CAAAmJ,EAAA,GAEzBpE,GAFyBqE,EAAA,GAAAA,EAAA,IAIjC7H,EAAalC,EAAKR,MAAM6H,aAAa3B,GAErC1B,EAASQ,GACXtC,EACAlC,EAAKqF,gBACLZ,EACAC,GAGJ1E,EAAKR,MAAMC,SAASgK,YAAoB,CAAE/D,KAAIxD,WAAY8B,EAAM,SAAAxD,OAAUkF,OAE1E1F,EAAKsF,iBAAiBtB,EAAM,OAAW,MAG3CgG,QAAU,SAACvF,EAAQC,GAAgB,IAAAuF,EAERxF,EAAO5C,YAAY0H,MAAM,KAFjBW,EAAAvJ,OAAA2D,EAAA,EAAA3D,CAAAsJ,EAAA,GAEhBE,GAFgBD,EAAA,GAAAA,EAAA,IAAAE,EAIR1F,EAAY7C,YAAY0H,MAAM,KAJtBc,EAAA1J,OAAA2D,EAAA,EAAA3D,CAAAyJ,EAAA,GAIhBE,GAJgBD,EAAA,GAAAA,EAAA,IAMzBE,EAAcvK,EAAKR,MAAM6H,aAAa8C,GACtCK,EAAcxK,EAAKR,MAAM6H,aAAaiD,GAEtCtG,EAASQ,GACX+F,EACAC,EACA/F,EACAC,GAGJ1E,EAAKR,MAAMC,SAASgK,YAAoB,CAAE/D,GAAIyE,EAAKjI,WAAY8B,EAAM,SAAAxD,OAAU2J,OAC/EnK,EAAKR,MAAMC,SAASgK,YAAoB,CAAE/D,GAAI4E,EAAKpI,WAAY8B,EAAM,SAAAxD,OAAU8J,UAGnFG,UAAY,SAAAzG,GAAU,IACVS,EAAwBT,EAAxBS,OAAQC,EAAgBV,EAAhBU,YAGhB,GAAKA,EAIL,GAAID,EAAO5C,cAAgB6C,EAAY7C,YAAa,CAEhD,GAA+B,eAA5B6C,EAAY7C,YAA8B,OAE7C,GAA+B,qBAA5B6C,EAAY7C,YACX,OAAO7B,EAAKgJ,WAAWvE,EAAQC,GAGnC1E,EAAKqJ,eAAe5E,EAAQC,OAMF,eAAvBD,EAAO5C,YACN7B,EAAK0J,cAAcjF,EAAQC,GAKK,eAA5BA,EAAY7C,YAChB7B,EAAK6J,gBAAgBpF,EAAQC,GAM5B1E,EAAKgK,QAAQvF,EAAQC,4EAKzB,IAAAgG,EAAAnL,KACL,OACIW,EAAAC,EAAAC,cAACuK,EAAA,SAAD,KACIzK,EAAAC,EAAAC,cAACwK,EAAA,EAAkBC,SAAnB,KACK,SAAC1J,GAAD,OACGjB,EAAAC,EAAAC,cAAA0K,EAAA,GACItJ,MAAOkJ,EAAKlI,MAAM2C,eAClB4F,UAAU,QACVC,cAAc,EACdC,MAAgB,UAAT9J,EAAkB,MAAO,MAChC+J,UAAU,EACVrF,QAAS6E,EAAK/B,iBACdwC,QAAST,EAAKlI,MAAMyC,WAEpB/E,EAAAC,EAAAC,cAACuK,EAAA,SAAD,CAAUS,SAAUlL,EAAAC,EAAAC,cAACiL,EAAA,EAAD,OACfX,EAAKlI,MAAMyC,WAAayF,EAAK7B,uBAK9C3I,EAAAC,EAAAC,cAAAkL,EAAA,OACIpL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBoK,UAAWlL,KAAKkL,WAC7BvK,EAAAC,EAAAC,cAAAmL,EAAA,GAAKC,KAAM,GAAIC,GAAI,IACfvL,EAAAC,EAAAC,cAACoD,GAAD,MACOjE,KAAKC,MAAMkM,eAAiBnM,KAAKC,MAAM0H,OAAO/F,MAC/CjB,EAAAC,EAAAC,cAAAuL,EAAA,GACEhK,MAAO,CAAEiK,UAAW,UACpBlF,YACIxG,EAAAC,EAAAC,cAAA,0BAKJF,EAAAC,EAAAC,cAAAlB,EAAA,GAAQ8B,KAAK,UAAUjC,KAAK,OAAO4C,MAAO,CAAEkK,YAAa,GAAKzK,QAAS7B,KAAKyG,UAA5E,UAKHzG,KAAKC,MAAMkM,aACRxL,EAAAC,EAAAC,cAACiL,EAAA,EAAD,MAEAnL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWwB,YAAY,mBAAmBb,KAAK,UAC1C,SAACP,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAACsD,GAAD,CAAmB7C,IAAKJ,EAASK,UAC5B4J,EAAKlL,MAAM0H,OAAO/E,IAAI,SAACrC,EAAOG,GAAR,OACnBC,EAAAC,EAAAC,cAAC0L,EAAD,CACIxL,IAAKL,EACLL,OAAQ8K,EAAKlL,MAAMI,OACnBC,IAAK6K,EAAKlL,MAAMK,IAAI6F,GACpB5F,MAAOA,EACPuB,KAAMqJ,EAAKxE,UACXxE,OAAQgJ,EAAKrE,YACbpG,MAAOA,MAGdQ,EAAS4B,iBAOlCnC,EAAAC,EAAAC,cAAAmL,EAAA,GAAKC,KAAM,GAAIC,GAAI,GACfvL,EAAAC,EAAAC,cAACuK,EAAA,SAAD,CAAUS,SAAUlL,EAAAC,EAAAC,cAACiL,EAAA,EAAD,OAChBnL,EAAAC,EAAAC,cAACkD,GAAD,CACI1D,OAAQL,KAAKC,MAAMI,OACnBC,IAAKN,KAAKC,MAAMK,IAChBwF,cAAe,SAAC0G,GAAD,OAAQrB,EAAKrF,cAAc0G,GAC1CzG,iBAAkB,SAACyG,GAAD,OAAQrB,EAAKpF,iBAAiByG,GAChDC,OAAQ,SAACD,GAAD,OAAQrB,EAAKnF,oBAAoBwG,SAM7D7L,EAAAC,EAAAC,cAAA,OACIuB,MAAO,CACHsK,SAAU,WACVC,KAAM,EACNC,OAAQ,EACRlB,MAAO,OACPmB,UAAW,oBACXC,QAAS,YACTC,WAAY,OACZV,UAAW,UAGf1L,EAAAC,EAAAC,cAAAlB,EAAA,GAAQyC,MAAO,CAAEkK,YAAa,GAAKzK,QAAS7B,KAAK2I,UAAjD,SAGAhI,EAAAC,EAAAC,cAAAlB,EAAA,GAAQ8B,KAAK,UAAUjC,KAAK,OAAO4C,MAAO,CAAEkK,YAAa,GAAKzK,QAAS7B,KAAKmJ,cAA5E,aAGAxI,EAAAC,EAAAC,cAAAlB,EAAA,GAAQ8B,KAAK,UAAUjC,KAAK,OAAO4C,MAAO,CAAEkK,YAAa,GAAKzK,QAAS7B,KAAKyG,UAA5E,SAGA9F,EAAAC,EAAAC,cAAAlB,EAAA,GAAQH,KAAK,OAAOiC,KAAK,UAAUiB,QAAS1C,KAAKiD,MAAMP,QAASsK,UAAWhN,KAAKC,MAAMoG,WAAYxE,QAAS7B,KAAKmI,QAAhH,iBAtaFpF,iBA2bHC,sBAZf,SAAyBC,EAAOC,GAC5B,MAAO,CACLP,WAAYsK,YAAiBhK,EAAOC,EAAS7C,QAC7CgG,WAAYA,YAAWpD,EAAO,gBAC9B0E,OAAQuF,YAAajK,EAAOC,EAAS5C,IAAI6F,IACzCgG,aAAelJ,EAAMG,IAAIC,MAAM,CAAC,OAAQ,YACxCyE,aAAc,SAAC3B,GACX,OAAOhD,YAAsBF,EAAOkD,MAK/BnD,CAAyByC","file":"static/js/set.25868f8f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Button, Icon, Skeleton, Popconfirm, Divider } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { listGroupsAttributes } from '../actions';\r\nimport { selectGroupAttributes } from '../selectors/entity';\r\n\r\nconst Panel = styled.div`\r\n    background: #f7f7f7;\r\n    border-radius: 4px;\r\n    margin-bottom: 24px;\r\n    border: 0px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    line-height: 22px;\r\n    padding: 12px 0 12px 40px;\r\n    color: rgba(0, 0, 0, 0.85);\r\n    position: relative;\r\n    transition: all 0.3s;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    padding: 4px 16px 16px 16px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst Drag = styled(Icon)`\r\n    font-style: normal;\r\n    vertical-align: -0.125em;\r\n    text-align: center;\r\n    text-transform: none;\r\n    line-height: 0;\r\n    text-rendering: optimizeLegibility;\r\n    font-size: 12px;\r\n    position: absolute;\r\n    display: inline-block;\r\n    line-height: 46px;\r\n    vertical-align: top;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    left: 16px;\r\n`;\r\n\r\nconst Edit = styled(Button)`\r\n    margin-left: 24px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Item = styled.div`\r\n    border-radius: 6px;\r\n    margin-right: 8px;\r\n    margin-bottom: 8px;\r\n    padding: 10px;\r\n    background-color: white;\r\n    border: 1px solid #e8e8e8;\r\n`;\r\n\r\nclass GroupPanel extends PureComponent {\r\n\r\n    componentDidMount() {\r\n        this.props.dispatch(listGroupsAttributes({ params: { entity: this.props.entity, set: this.props.set, group: this.props.group.get('id') }}));\r\n    }\r\n    \r\n    render() {\r\n        const group = this.props.group;\r\n        const index = this.props.index;\r\n        return (\r\n            <Draggable key={group.get('id')} draggableId={`group-${group.get('id')}`} index={index}>\r\n                {(provided, snapshot) => (\r\n                    <Panel ref={provided.innerRef} {...provided.draggableProps}>\r\n                        <Header>\r\n                            <Drag type=\"drag\" {...provided.dragHandleProps} />\r\n                            <span>{group.get('name')}</span>\r\n                            <Edit type=\"dashed\" shape=\"circle\" icon=\"edit\" size=\"small\" onClick={() => this.props.edit(group.get('id'), group.get('name'), index)}/>\r\n                            <Divider type=\"vertical\" />\r\n                            <Popconfirm \r\n                                title=\"Sure to delete?\"\r\n                                onConfirm={() => this.props.delete(group.get('id'), index)}\r\n                                >\r\n                                <Icon type=\"delete\" style={{ color: 'red' }}/>\r\n                            </Popconfirm>    \r\n                        </Header>\r\n                        <Droppable droppableId={`group-${group.get('id')}`} type=\"attributes\" direction=\"horizontal\">\r\n                            {(provided, snapshot) => (                               \r\n                                <Content\r\n                                    ref={provided.innerRef}\r\n                                > \r\n                                    <Skeleton active loading={this.props.loading}>\r\n                                        {this.props.attributes.map((item, index) => (\r\n                                            <Draggable key={item.get('id')} draggableId={`attr-${item.get('id')}`} index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <Item\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                    >\r\n                                                        {`${item.get('frontend_label')} (${item.get('attribute_code')})`}\r\n                                                    </Item>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </Skeleton>\r\n                                </Content>\r\n                            )}\r\n                        </Droppable>\r\n                    </Panel>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n    return {\r\n      attributes: selectGroupAttributes(state, ownProps.group.get('id')),\r\n      loading: state.app.getIn(['groups', 'attributes', ownProps.group.get('id'), 'loading']),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(GroupPanel);","import React, { Fragment, PureComponent, Suspense, lazy } from 'react';\r\nimport { Row, Col, Button, Drawer, Empty, notification, message } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport isEqual from 'lodash.isequal';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport { listGroups, reorderSet, saveGroupAttributes, dataChanged, removeGroup } from '../actions';\r\nimport { selectGroups, selectGroupAttributes, selectAttributes } from '../selectors/entity';\r\nimport { presistSetRegroup, deleteGroup } from '../utils/WebAPI';\r\nimport { hasChanges } from '../selectors/cockpit';\r\nimport { updateSequence } from '../utils/common';\r\nimport { ResponsiveContext } from \"../contexts/Responsive\";\r\n\r\nimport FallbackLoading from './FallbackLoading';\r\n\r\nimport Group from './Group';\r\n\r\nconst AddGroup = lazy(() => import('./AddGroup' /* webpackChunkName: \"addGroup\" */));\r\nconst EditGroup = lazy(() => import('./EditGroup' /* webpackChunkName: \"editGroup\" */));\r\nconst AttributeList = lazy(() => import('./AttributeList' /* webpackChunkName: \"attributeList\" */));\r\nconst AddAttribute = lazy(() => import('./AddAttribute' /* webpackChunkName: \"addAttribute\" */));\r\n\r\nconst Container = styled.div`\r\n    background-color: #fff;\r\n`;\r\n\r\nconst GroupPanelWrapper = styled.div`\r\n    height: calc(90vh - 108px);\r\n    overflow: auto;\r\n`;\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    let result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return updateSequence(result);\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    let destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = updateSequence(destClone);\r\n    result['moved'] = removed;\r\n\r\n    return result;\r\n};\r\n\r\nclass Set extends PureComponent {\r\n\r\n    state = { \r\n        subDrawer: false,\r\n        subDrawerContent: null,\r\n        subDrawerTitle: null,\r\n        subDrawerData: {},\r\n        loading: false,\r\n    };\r\n\r\n    getAttributes = () => [];\r\n    updateAttributes = () => null;\r\n    reloadAttributeList = () => null;\r\n\r\n    componentDidMount = () => {\r\n        this.props.dispatch(listGroups({ params: { entity: this.props.entity, set: this.props.set.id }}));\r\n\r\n        this.props.canClose(() => !this.props.hasChanges);\r\n\r\n        this.props.onClose(() => this.props.dispatch(dataChanged({ type: 'entityViewer', changed: false})));\r\n    }\r\n\r\n    addGroup = () => {\r\n        this.setState({            \r\n            subDrawerContent: 'addGroup',\r\n            subDrawerTitle: 'Add Group',\r\n            subDrawer: true,\r\n        });\r\n    }\r\n\r\n    editGroup = (id, name, updateIndex) => {\r\n        this.setState({            \r\n            subDrawerContent: 'editGroup',\r\n            subDrawerTitle: 'Edit Group',\r\n            subDrawerData: {\r\n                id, name, updateIndex\r\n            },\r\n            subDrawer: true,\r\n        });\r\n    }\r\n\r\n    deleteGroup = async (id, removeIndex) => {\r\n        this.setState((state) => {\r\n            return {\r\n              ...state,\r\n              loading: true,\r\n            } \r\n        });\r\n    \r\n        const hide = message.loading('Deleting..', 0);\r\n    \r\n        try {\r\n            \r\n            await deleteGroup({ entity: this.props.entity, set: this.props.set.id, group: id });\r\n    \r\n            hide();\r\n\r\n            const group = this.props.groups.toJS().find(group => {\r\n                return group.id === id;\r\n            });\r\n\r\n            this.props.getGroupAttr(group.id).forEach(attribute => {\r\n                this.updateAttributes(attribute, true);\r\n            });\r\n            \r\n            this.props.dispatch(removeGroup({ set: this.props.set.id, removeIndex }));\r\n    \r\n            message.success('Group deleted.', 2);\r\n\r\n            await this.onSave();\r\n    \r\n        } catch (error) {\r\n\r\n            let message, description;\r\n            if(error.type === 'network') {\r\n                message = 'Network Error';\r\n                description = error.message;\r\n            } \r\n            else if(error.type === 'server') {\r\n                message = error.error.errors[0].title;\r\n                description = error.error.errors[0].detail;\r\n            }\r\n    \r\n            hide();\r\n    \r\n            notification.error({\r\n                message,\r\n                description,\r\n                duration: 0\r\n            });\r\n    \r\n            this.setState((state) => {\r\n                return {\r\n                  ...state,\r\n                  loading: false,\r\n                } \r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.props.close();\r\n    }\r\n\r\n    onSave = async () => {\r\n\r\n        this.setState((state) => {\r\n            return {\r\n                loading: true,\r\n            } \r\n        });\r\n\r\n        const hide = message.loading('Saving changes..', 0);\r\n\r\n        let groups = updateSequence(this.props.groups);\r\n\r\n        groups = groups.toJS().map(group => {\r\n            const attributes = updateSequence(this.props.getGroupAttr(group.id)).map(attribute => {\r\n                return {\r\n                    id: attribute.get('id'),\r\n                    type: attribute.get('type'),\r\n                    sequence: attribute.get('sequence'),\r\n                }\r\n            });\r\n\r\n            group['attributes'] = attributes.toJS();\r\n\r\n            return group;\r\n        });\r\n\r\n        try {\r\n            await presistSetRegroup({ entity: this.props.entity, set: this.props.set.id }, groups, {});\r\n\r\n            this.props.dispatch(dataChanged({ type: 'entityViewer', changed: false}));\r\n\r\n            hide();\r\n\r\n            message.success('Changes has been saved.');\r\n\r\n        } catch (error) {\r\n            let message, description;\r\n            if(error.type === 'network') {\r\n                message = 'Network Error';\r\n                description = error.message;\r\n            } \r\n            else if(error.type === 'server' && error.status === 500) {\r\n                message = error.error.errors[0].title;\r\n                description = error.error.errors[0].detail;\r\n            }\r\n            notification.error({\r\n                message,\r\n                description,\r\n                duration: 0\r\n            });\r\n        }\r\n\r\n        this.setState((state) => {\r\n            return {\r\n                loading: false,\r\n            } \r\n        });\r\n    }\r\n\r\n    addAttribute = () => {\r\n        this.setState({            \r\n            subDrawerContent: 'addAttribute',\r\n            subDrawerTitle: 'Add Attribute',\r\n            subDrawer: true,\r\n        });\r\n    }\r\n\r\n    onSubDrawerClose = () => {\r\n        this.setState({\r\n            subDrawer: false,\r\n            subDrawerContent: null,\r\n            subDrawerTitle: null,\r\n        });\r\n    };\r\n\r\n    onAddtributeAdd = () => {\r\n        this.reloadAttributeList();\r\n    }\r\n\r\n    getDrawerContent = () => {\r\n        let content;\r\n        switch(this.state.subDrawerContent) {\r\n            case 'addGroup':\r\n                content = <AddGroup entity={this.props.entity} set={this.props.set} close={this.onSubDrawerClose} {...this.state.subDrawerData}/>;\r\n            break;\r\n            case 'editGroup':\r\n                content = <EditGroup entity={this.props.entity} set={this.props.set} close={this.onSubDrawerClose} {...this.state.subDrawerData} />;\r\n            break;\r\n            case 'addAttribute':\r\n                content = <AddAttribute entity={this.props.entity} close={this.onSubDrawerClose} onAdd={this.onAddtributeAdd} {...this.state.subDrawerData}/>;\r\n            break;\r\n            default:\r\n                content = null;\r\n        }\r\n        return content;\r\n    }\r\n\r\n    sortGroups = (source, destination) => {\r\n        const items = reorder(\r\n            this.props.groups,\r\n            source.index,\r\n            destination.index\r\n        );\r\n\r\n        if(!isEqual(items, this.props.groups.toArray())) {\r\n            this.props.dispatch(reorderSet({ set: this.props.set.id, groups: items }));   \r\n        }\r\n    }\r\n\r\n    sortAttributes = (source, destination) => {\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [ type, id ] = source.droppableId.split('-');\r\n\r\n        const attributes = this.props.getGroupAttr(id);\r\n            \r\n        const items = reorder(\r\n            attributes,\r\n            source.index,\r\n            destination.index\r\n        );\r\n\r\n        if(!isEqual(items, attributes.toArray())) {\r\n            this.props.dispatch(saveGroupAttributes({ id, attributes: items }));\r\n        }\r\n    }\r\n\r\n    moveAttribute = (source, destination) => {\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [ type, id ] = destination.droppableId.split('-');\r\n\r\n        const attributes = this.props.getGroupAttr(id);\r\n        \r\n        const result = move(\r\n            this.getAttributes(),\r\n            attributes,\r\n            source,\r\n            destination\r\n        );\r\n\r\n        this.props.dispatch(saveGroupAttributes({ id, attributes: result[`group-${id}`] }));\r\n\r\n        this.updateAttributes(result['moved']);\r\n    }\r\n\r\n    removeAttribute = (source, destination) => {\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [ type, id ] = source.droppableId.split('-');\r\n\r\n        const attributes = this.props.getGroupAttr(id);\r\n\r\n        const result = move(\r\n            attributes,\r\n            this.getAttributes(),\r\n            source,\r\n            destination\r\n        );\r\n        \r\n        this.props.dispatch(saveGroupAttributes({ id, attributes: result[`group-${id}`] }));\r\n\r\n        this.updateAttributes(result['moved'], true);\r\n    }\r\n\r\n    reGroup = (source, destination) => {\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [ stype, sid ] = source.droppableId.split('-');\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [ dtype, did ] = destination.droppableId.split('-');\r\n\r\n        const sAttributes = this.props.getGroupAttr(sid);\r\n        const dAttributes = this.props.getGroupAttr(did);\r\n\r\n        const result = move(\r\n            sAttributes,\r\n            dAttributes,\r\n            source,\r\n            destination\r\n        );\r\n        \r\n        this.props.dispatch(saveGroupAttributes({ id: sid, attributes: result[`group-${sid}`] }));\r\n        this.props.dispatch(saveGroupAttributes({ id: did, attributes: result[`group-${did}`] }));\r\n    }\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n\r\n            if(destination.droppableId === 'attributes') return;\r\n\r\n            if(destination.droppableId === 'groups-droppable') {\r\n                return this.sortGroups(source, destination);\r\n            };\r\n\r\n            this.sortAttributes(source, destination);\r\n\r\n        } else {\r\n\r\n            // New attribute is assigned to a group\r\n\r\n            if(source.droppableId === 'attributes') {\r\n                this.moveAttribute(source, destination);    \r\n            }   \r\n\r\n            // Attribute is removed from a group\r\n\r\n            else if(destination.droppableId === 'attributes') { \r\n                this.removeAttribute(source, destination);\r\n            }\r\n\r\n            // Move between groups\r\n\r\n            else {\r\n                 this.reGroup(source, destination);\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <ResponsiveContext.Consumer>\r\n                    {(size) => (\r\n                        <Drawer\r\n                            title={this.state.subDrawerTitle}\r\n                            placement=\"right\"\r\n                            maskClosable={false}\r\n                            width={size === 'small'? '80%': '65%'} \r\n                            closable={false}\r\n                            onClose={this.onSubDrawerClose}\r\n                            visible={this.state.subDrawer}\r\n                        >\r\n                            <Suspense fallback={<FallbackLoading />}>\r\n                                {this.state.subDrawer && this.getDrawerContent()}\r\n                            </Suspense>\r\n                        </Drawer>\r\n                    )}\r\n                </ResponsiveContext.Consumer>                \r\n                <Row>\r\n                    <DragDropContext onDragEnd={this.onDragEnd}>\r\n                        <Col span={24} md={16}>                      \r\n                            <Container>\r\n                                {(!this.props.loadingGroup && !this.props.groups.size) && (\r\n                                  <Empty\r\n                                    style={{ textAlign: \"center\" }}\r\n                                    description={\r\n                                        <span>\r\n                                           No Groups\r\n                                        </span>\r\n                                    }\r\n                                  >\r\n                                    <Button type=\"primary\" icon=\"plus\" style={{ marginRight: 8 }} onClick={this.addGroup}>\r\n                                        Group\r\n                                    </Button> \r\n                                  </Empty>\r\n                                )}\r\n                                {this.props.loadingGroup ? (\r\n                                    <FallbackLoading />\r\n                                ) : (\r\n                                    <Droppable droppableId=\"groups-droppable\" type=\"groups\">\r\n                                        {(provided, snapshot) => (\r\n                                            <GroupPanelWrapper ref={provided.innerRef}>\r\n                                                {this.props.groups.map((group, index) => (\r\n                                                    <Group \r\n                                                        key={index} \r\n                                                        entity={this.props.entity} \r\n                                                        set={this.props.set.id}  \r\n                                                        group={group}\r\n                                                        edit={this.editGroup}\r\n                                                        delete={this.deleteGroup}\r\n                                                        index={index} \r\n                                                    />\r\n                                                ) )}            \r\n                                                {provided.placeholder}\r\n                                            </GroupPanelWrapper>\r\n                                        )}\r\n                                    </Droppable>\r\n                                )}\r\n                            </Container>\r\n                        </Col>\r\n                        <Col span={24} md={8}>\r\n                            <Suspense fallback={<FallbackLoading />}>\r\n                                <AttributeList \r\n                                    entity={this.props.entity}  \r\n                                    set={this.props.set} \r\n                                    getAttributes={(call)=>this.getAttributes=call} \r\n                                    updateAttributes={(call)=>this.updateAttributes=call}\r\n                                    reload={(call)=>this.reloadAttributeList=call}\r\n                                />\r\n                            </Suspense>\r\n                        </Col>\r\n                    </DragDropContext>\r\n                </Row>\r\n                <div\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: 0,\r\n                        bottom: 0,\r\n                        width: '100%',\r\n                        borderTop: '1px solid #e9e9e9',\r\n                        padding: '10px 16px',\r\n                        background: '#fff',\r\n                        textAlign: 'right',\r\n                    }}\r\n                >\r\n                    <Button style={{ marginRight: 8 }} onClick={this.onCancel}>\r\n                        Close\r\n                    </Button>\r\n                    <Button type=\"primary\" icon=\"plus\" style={{ marginRight: 8 }} onClick={this.addAttribute}>\r\n                        Attribute\r\n                    </Button>\r\n                    <Button type=\"primary\" icon=\"plus\" style={{ marginRight: 8 }} onClick={this.addGroup}>\r\n                        Group\r\n                    </Button>                    \r\n                    <Button icon=\"save\" type=\"primary\" loading={this.state.loading} disabled={!this.props.hasChanges} onClick={this.onSave}>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n    return {\r\n      attributes: selectAttributes(state, ownProps.entity),\r\n      hasChanges: hasChanges(state, 'entityViewer'),\r\n      groups: selectGroups(state, ownProps.set.id),\r\n      loadingGroup:  state.app.getIn(['sets', 'loading']),\r\n      getGroupAttr: (id) => {\r\n          return selectGroupAttributes(state, id)\r\n      }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Set);"],"sourceRoot":""}