{"version":3,"sources":["components/EditGroup.js"],"names":["EditGroup","state","loading","onSave","_callee","values","hide","post","response","_message2","description","setFields","form","E_Projects_eav_packages_eav_dashboard_resources_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default","a","wrap","_context","prev","next","_this","setState","antd_es_message__WEBPACK_IMPORTED_MODULE_10__","data","type","attributes","name","presistExistingGroup","entity","props","set","id","group","updateIndex","sent","dispatch","updateSet","success","then","close","t0","message","status","error","errors","title","detail","forEach","item","source","pointer","split","length","touched","value","Error","antd_es_notification__WEBPACK_IMPORTED_MODULE_8__","duration","stop","handleSubmit","e","preventDefault","validateFieldsAndScroll","err","setFieldsValue","this","validateFields","catch","fieldsError","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","nameError","isFieldTouched","react__WEBPACK_IMPORTED_MODULE_17___default","createElement","antd_es_form__WEBPACK_IMPORTED_MODULE_3__","layout","onSubmit","Item","label","initialValue","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","disabled","validateStatus","help","rules","required","placeholder","autoComplete","autoFocus","antd_es_button__WEBPACK_IMPORTED_MODULE_1__","style","marginRight","onClick","htmlType","Object","keys","some","field","PureComponent","WrappedEditGroupForm","create","connect"],"mappings":"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","file":"static/js/editGroup.fc3f56de.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Form, Input, Button, notification, message } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateSet } from '../actions';\r\nimport { presistExistingGroup } from '../utils/WebAPI';\r\n\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n  \r\nclass EditGroup extends PureComponent {\r\n\r\n    state = {             \r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {        \r\n        const { setFieldsValue } = this.props.form;\r\n\r\n        setFieldsValue({ \r\n            name: this.props.name\r\n        });\r\n\r\n        this.props.form.validateFields().catch(()=>{});\r\n    }\r\n\r\n    onSave = async (values) => {\r\n\r\n        this.setState((state) => {\r\n            return {\r\n                loading: true,\r\n            } \r\n        });\r\n\r\n        const hide = message.loading('Saving changes..', 0);\r\n\r\n        try {\r\n\r\n            const post = {\r\n                data: {\r\n                    type: 'attribute_group',\r\n                    attributes: {\r\n                       name:  values.name,\r\n                    }\r\n                }\r\n            };\r\n\r\n            const response = await presistExistingGroup({ entity: this.props.entity, set: this.props.set.id, group: this.props.id, updateIndex: this.props.updateIndex }, post, {});\r\n\r\n            this.props.dispatch(updateSet(response));\r\n\r\n            hide();\r\n\r\n            this.setState((state) => {\r\n                return {\r\n                    loading: false,\r\n                } \r\n            });\r\n\r\n            message.success('Changes has been saved.', 1).then(() => {\r\n                this.props.close();\r\n            });           \r\n\r\n        } catch (error) {\r\n\r\n            let message, description;\r\n            if(error.type === 'network') {\r\n                message = 'Network Error';\r\n                description = error.message;\r\n            } \r\n            else if(error.type === 'server' && error.status === 500) {\r\n                message = error.error.errors[0].title;\r\n                description = error.error.errors[0].detail;\r\n            } else {\r\n                const { setFields } = this.props.form;\r\n\r\n                let form = {};\r\n\r\n                error.error.errors.forEach(item => {\r\n                    const source = item.source.pointer.split('/');\r\n                    form[source[source.length-1]] = {\r\n                        touched: true,\r\n                        value: values[source[source.length-1]],\r\n                        errors: [new Error(item.detail)]\r\n                    };\r\n                });\r\n\r\n                setFields(form);\r\n\r\n                message = 'Input Error';\r\n                description = '';\r\n            }\r\n            hide();\r\n\r\n            notification.error({\r\n                message,\r\n                description,\r\n                duration: 0\r\n            });\r\n\r\n            this.setState((state) => {\r\n                return {\r\n                    loading: false,\r\n                } \r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                this.onSave(values);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            getFieldDecorator, getFieldsError, getFieldError, isFieldTouched,\r\n        } = this.props.form;\r\n\r\n        const nameError = isFieldTouched('name') && getFieldError('name');\r\n\r\n        return (\r\n            <Form layout=\"horizontal\" onSubmit={this.handleSubmit}>\r\n                <Form.Item\r\n                    label=\"Entity\"                   \r\n                >\r\n                    {getFieldDecorator('entity', {\r\n                        initialValue: this.props.entity\r\n                    })(\r\n                        <Input disabled />\r\n                    )}                    \r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Set\"                   \r\n                >\r\n                    <Input disabled value={this.props.set.name} />\r\n                    {getFieldDecorator('set', {\r\n                        initialValue: this.props.set.id\r\n                    })(\r\n                        <Input type=\"hidden\" />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                    validateStatus={nameError ? 'error' : ''}\r\n                    help={nameError || ''}\r\n                >\r\n                    {getFieldDecorator('name', {\r\n                        rules: [{ required: true, message: 'Please input name!' }],\r\n                    })(\r\n                        <Input placeholder=\"Name\" autoComplete=\"off\" autoFocus/>\r\n                    )}\r\n                </Form.Item>                \r\n                <Form.Item>\r\n                    <Button style={{ marginRight: 8 }} onClick={this.props.close}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        loading={this.state.loading}\r\n                        disabled={hasErrors(getFieldsError())}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst WrappedEditGroupForm = Form.create({ name: 'add_group' })(EditGroup);\r\n\r\n\r\nexport default connect()(WrappedEditGroupForm);"],"sourceRoot":""}