{"version":3,"sources":["components/Errors.js","components/Sets.js","containers/Entity.js"],"names":["Errors","prevProps","this","props","error","equal","type","antd_es_notification__WEBPACK_IMPORTED_MODULE_1__","message","description","duration","status","errors","title","detail","Component","SearchWarpper","styled","div","_templateObject","TableWrapper","_templateObject2","Title","span","_templateObject3","ActionMenu","_templateObject4","Sets","state","listSize","currentPageNo","data","loading","total","showMenu","requestData","_callee","size","number","search","_ref2","meta","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","_this","setState","fetchSets","entity","entity_code","Object","objectSpread","page[size]","page[number]","sent","paginated","current_page","stop","value","filter[search]","viewSet","item","dispatch","openDrawer","set","updateSet","response","index","concat","toConsumableArray","addSet","editSet","rowIndex","id","name","addAttribute","viewAttributes","push","handleDelete","_callee2","hide","_message2","_context2","deleteSet","success","t0","notification","_this2","columns","dataIndex","key","render","text","record","react_default","createElement","Fragment","es_button","onClick","icon","style","marginLeft","popconfirm","onConfirm","react","row","justify","col","md","input","Search","placeholder","onSearch","marginBottom","table","onRow","onMouseEnter","event","onMouseLeave","pagination","onChange","page","current","pageSize","showQuickJumper","showLessItems","bordered","showHeader","rowKey","dataSource","connect","Entity_templateObject","Entity_templateObject2","Code","Entity_templateObject3","Entity_templateObject4","Entity_Title","tag","color","toUpperCase","Entity","listEntities","query","entities","get","getIn","newProps","Entity_SearchWarpper","textAlign","Entity_TableWrapper","updateListPageNo","simple","toJS","expandedRowKeys","expandRows","expandedRowRender","components_Sets","onExpand","expanded","expandTable","keys","expandRowByClick","selectEntities","selectListPageNo","selectExpandedRow","selectListSize"],"mappings":"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","file":"static/js/entity.3da30da8.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { notification } from 'antd';\r\nimport equal from 'fast-deep-equal';\r\n\r\nclass Errors extends Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.error && !equal(prevProps.error, this.props.error)) {\r\n            if(this.props.error.type === 'network') {\r\n                notification.error({\r\n                    message: 'Network Error',\r\n                    description: this.props.error.message,\r\n                    duration: 0\r\n                });\r\n            } \r\n            else if(this.props.error.type === 'server' && this.props.error.status === 500) {\r\n                notification.error({\r\n                    message: this.props.error.error.errors[0].title,\r\n                    description: this.props.error.error.errors[0].detail,\r\n                    duration: 0\r\n                });\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Errors;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Row, Col, Table, Button, Input, Popconfirm, notification, message  } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport { openDrawer } from '../actions';\r\nimport { fetchSets, deleteSet } from '../utils/WebAPI';\r\n\r\nconst SearchWarpper = styled.div`\r\n  width: 200px;\r\n  margin-bottom: 0.75rem;\r\n`;\r\n\r\nconst TableWrapper = styled.div`\r\n  @media (max-width: 480px) {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  color: #3eaf7c;  \r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ActionMenu = styled.div`\r\n  display: inline;\r\n  margin-left: 1rem;\r\n`\r\n\r\nclass Sets extends Component {\r\n\r\n  state = {\r\n    listSize: 10,\r\n    currentPageNo: 1,\r\n    data: [],\r\n    loading: false,\r\n    total: null,\r\n    showMenu: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData(this.state.listSize, 1);\r\n  }\r\n\r\n  requestData = async (size, number, search = {}) => {\r\n    this.setState({ loading: true });\r\n    const { data, meta } = await fetchSets({ entity: this.props.entity.entity_code }, {'page[size]': size, 'page[number]': number, ...search });\r\n    this.setState({ data, loading: false, currentPageNo: meta.paginated.current_page, total: meta.paginated.total });\r\n  }\r\n\r\n  search = (value) => {\r\n    this.requestData(this.state.listSize, 1, { 'filter[search]': value });\r\n  }\r\n\r\n  viewSet = (item) => {\r\n    this.props.dispatch(openDrawer({ type: 'set', entity: this.props.entity.entity_code, set: item }));\r\n  }\r\n\r\n  updateSet = (response, index) => {\r\n    if(!index) {\r\n      this.setState((state) => {\r\n        return {\r\n            ...state,\r\n            data: [\r\n            ...state.data,\r\n            response.data\r\n          ]\r\n        };\r\n      })\r\n    } else {\r\n      this.setState((state) => {\r\n        let data = state.data;\r\n        data[`${index}`] = response.data\r\n        return {\r\n          ...state,\r\n          data: [\r\n            ...data\r\n          ]\r\n        };\r\n      })\r\n    }\r\n  }\r\n\r\n  addSet = () => {\r\n    this.props.dispatch(openDrawer({ type: 'addSet', entity: this.props.entity, updateSet: this.updateSet }));\r\n  }\r\n\r\n  editSet = (rowIndex, id, name) => {\r\n    this.props.dispatch(openDrawer({ type: 'editSet', entity: this.props.entity, updateSet: this.updateSet, id, name, index: rowIndex }));\r\n  }\r\n\r\n  addAttribute = () => {\r\n    this.props.dispatch(openDrawer({ type: 'addAttribute', entity: this.props.entity.entity_code }));\r\n  }\r\n\r\n  viewAttributes = () => {\r\n    this.props.dispatch(push(`/attributes?entity=${this.props.entity.entity_code}`));\r\n  }\r\n\r\n  handleDelete = async (set) => {\r\n    \r\n    this.setState((state) => {\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n        } \r\n    });\r\n\r\n    const hide = message.loading('Deleting..', 0);\r\n\r\n    try {\r\n        \r\n        await deleteSet({ entity: this.props.entity.entity_code, set });\r\n\r\n        hide();\r\n\r\n        this.requestData(this.props.listSize, 1);\r\n\r\n        message.success('Set deleted.', 2);\r\n\r\n    } catch (error) {\r\n\r\n        let message, description;\r\n        if(error.type === 'network') {\r\n            message = 'Network Error';\r\n            description = error.message;\r\n        } \r\n        else if(error.type === 'server') {\r\n            message = error.error.errors[0].title;\r\n            description = error.error.errors[0].detail;\r\n        }\r\n\r\n        hide();\r\n\r\n        notification.error({\r\n            message,\r\n            description,\r\n            duration: 0\r\n        });\r\n\r\n        this.setState((state) => {\r\n            return {\r\n              ...state,\r\n              loading: false,\r\n            } \r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const columns = [{\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      render: (text, record, rowIndex) => (\r\n        <>\r\n          <Title>{text}</Title>\r\n          {(this.state.showMenu === rowIndex) && (\r\n            <ActionMenu>\r\n              <Button type=\"dashed\" size=\"small\"  onClick={() => this.viewSet(record)}>\r\n                View\r\n              </Button>\r\n              <Button type=\"primary\" icon=\"edit\" size=\"small\" style={{ marginLeft: 8 }} onClick={() => this.editSet(rowIndex, record.id, text)}>\r\n                Edit Name\r\n              </Button>\r\n              <Popconfirm \r\n                  title=\"Sure to delete?\"\r\n                  onConfirm={() => this.handleDelete(record.id)}\r\n                >\r\n                <Button type=\"danger\" icon=\"delete\" size=\"small\" style={{ marginLeft: 8 }}>\r\n                  Delete\r\n                </Button>\r\n              </Popconfirm>    \r\n            </ActionMenu>\r\n          )}\r\n        </>\r\n      ),\r\n    }];\r\n\r\n    return (\r\n      <Fragment>\r\n        <Row type=\"flex\" justify=\"space-around\">\r\n          <Col span={24} md={12}>\r\n            <Row type=\"flex\" justify=\"start\">\r\n              <Col span={6}>\r\n                <SearchWarpper>\r\n                  <Input.Search\r\n                    placeholder=\"Search Set\"\r\n                    size=\"large\"\r\n                    onSearch={this.search}\r\n                  />\r\n                </SearchWarpper>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col span={24} md={12}>\r\n            <Row type=\"flex\" justify=\"space-around\">\r\n              <Button type=\"dashed\" style={{ marginBottom: 8 }} onClick={this.viewAttributes}>\r\n                View Attributes\r\n              </Button>\r\n              <Button type=\"primary\" icon=\"plus\" style={{ marginBottom: 8 }} onClick={this.addSet}>\r\n                Set\r\n              </Button>\r\n              <Button type=\"primary\" icon=\"plus\" style={{ marginBottom: 8 }} onClick={this.addAttribute}>\r\n                Attribute\r\n              </Button>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <TableWrapper>\r\n              <Table\r\n                onRow={(record, rowIndex) => {\r\n                  return {\r\n                    onMouseEnter: event =>  this.setState({ showMenu: rowIndex }),\r\n                    onMouseLeave: event =>  this.setState({ showMenu: null })\r\n                  };\r\n                }}\r\n                pagination={{\r\n                  onChange: (page) => {\r\n                    this.requestData(this.state.listSize, page);\r\n                  },\r\n                  current: this.state.currentPageNo,\r\n                  pageSize: this.state.listSize,\r\n                  size: 'small',\r\n                  showQuickJumper: true,\r\n                  showLessItems: true,\r\n                  total: this.state.total\r\n                }}\r\n                loading={this.state.loading}\r\n                bordered\r\n                showHeader={false}\r\n                rowKey=\"id\"\r\n                title={() => 'Sets'}\r\n                dataSource={this.state.data}\r\n                columns={columns} />\r\n              </TableWrapper>\r\n          </Col>\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connect()(Sets);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Table, Tag, Input } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nimport { listEntities, updateListPageNo, expandTable } from '../actions';\r\nimport { selectListPageNo, selectExpandedRow, selectListSize } from '../selectors/cockpit';\r\nimport { selectEntities } from '../selectors/entity';\r\n\r\nimport Errors from '../components/Errors';\r\n\r\nimport Sets from '../components/Sets';\r\n\r\nconst SearchWarpper = styled.div`\r\n  width: 200px;\r\n  margin-bottom: 1rem;\r\n  @media (min-width: 996px) {\r\n    width: 40%;\r\n  }\r\n`;\r\n\r\nconst TableWrapper = styled.div`\r\n  @media (max-width: 480px) {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n`;\r\n\r\nconst Code = styled.span`\r\n  color: #6f42c1;  \r\n  background-color: rgba(27,31,35,.05);\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  color: #3eaf7c;  \r\n  text-transform: uppercase;\r\n`;\r\n\r\n\r\nconst columns = [{\r\n  title: 'Code',\r\n  dataIndex: 'entity_code',\r\n  key: 'entity_code',\r\n  render: text => <Title>{text}</Title>,\r\n}, {\r\n  title: 'Class',\r\n  dataIndex: 'entity_class',\r\n  key: 'entity_class',\r\n  render: text => <Code>{text}</Code>,\r\n}, {\r\n  title: 'Table',\r\n  dataIndex: 'entity_table',\r\n  key: 'entity_table',\r\n  render: text => <Tag color=\"blue\" key={text}>{text.toUpperCase()}</Tag>\r\n}];\r\n\r\nclass Entity extends Component {\r\n\r\n  componentDidMount() {\r\n    if(\r\n      !this.props.entities.get('data').size ||\r\n      (this.props.entities.getIn(['meta', 'paginated', 'current_page']) !==  this.props.currentPageNo)\r\n    ) {\r\n      this.requestData(this.props.listSize, this.props.currentPageNo);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps (newProps) {\r\n    if(newProps.currentPageNo !== this.props.currentPageNo ) {\r\n      this.requestData(this.props.listSize, newProps.currentPageNo);\r\n    }\r\n  }\r\n\r\n  requestData = (size, number, search = {}) => {\r\n    this.props.dispatch(listEntities({ query : { 'page[size]': size, 'page[number]': number, ...search } }));\r\n  }\r\n\r\n  search = (value) => {\r\n    this.requestData(this.props.listSize, 1, { 'filter[search]': value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <Col span={24}>\r\n          <Row>\r\n            <Col span={24} md={12}>\r\n              <SearchWarpper>\r\n                <Input.Search\r\n                  placeholder=\"Search Entity\"\r\n                  size=\"large\"\r\n                  onSearch={this.search}\r\n                />\r\n              </SearchWarpper>\r\n            </Col>\r\n            <Col span={24} md={12} style={{ textAlign: \"right\" }}>\r\n              {/* <Button type=\"primary\" icon=\"plus\" style={{ marginBottom: 8 }} onClick={this.addAttribute}>\r\n                Entity\r\n              </Button> */}\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col span={24}>\r\n          <Errors error={this.props.entities.get('errors')} /> \r\n          <TableWrapper>\r\n            <Table\r\n              bordered\r\n              rowKey=\"id\"\r\n              pagination={{\r\n                onChange: (page) => {\r\n                  this.requestData(this.props.listSize, page);\r\n                  this.props.dispatch(updateListPageNo({ type: 'entity', number: page }));\r\n                },\r\n                current: this.props.currentPageNo,\r\n                pageSize: this.props.listSize,\r\n                simple: true,\r\n                total: this.props.entities.getIn(['meta', 'paginated', 'total'])\r\n              }}\r\n              dataSource={this.props.entities.get('data').toJS()}\r\n              loading={this.props.entities.get('loading')}\r\n              expandedRowKeys={this.props.expandRows.toJS()}\r\n              expandedRowRender={(record, index) => <Sets entity={record} index={index} />}\r\n              onExpand={(expanded, record) => this.props.dispatch(expandTable({ type: 'entity', keys: expanded ? [record.id] : [] }))}\r\n              expandRowByClick\r\n              columns={columns} />\r\n          </TableWrapper>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    entities: selectEntities(state),\r\n    currentPageNo: selectListPageNo('entity', state),\r\n    expandRows: selectExpandedRow('entity', state),\r\n    listSize: selectListSize('entity', state),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Entity);\r\n"],"sourceRoot":""}