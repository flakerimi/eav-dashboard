{"version":3,"sources":["components/GloableDrawer.js"],"names":["Set","lazy","Promise","all","__webpack_require__","e","then","bind","AddSet","EditSet","AddAttribute","EditAttribute","confirm","antd_es_modal__WEBPACK_IMPORTED_MODULE_9__","GloableDrawer","canClose","onClose","getContent","props","_this","visible","data","type","concat","set","name","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","Object","assign","close","state","func","dispatch","closeDrawer","title","content","okText","okType","cancelText","onOk","onCancel","_this2","this","_this$getContent","_this$getContent2","E_Projects_eav_packages_eav_dashboard_resources_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_contexts_Responsive__WEBPACK_IMPORTED_MODULE_12__","Consumer","size","antd_es_drawer__WEBPACK_IMPORTED_MODULE_1__","placement","closable","width","react__WEBPACK_IMPORTED_MODULE_10__","fallback","_FallbackLoading__WEBPACK_IMPORTED_MODULE_15__","PureComponent","connect","drawerState","drawerData"],"mappings":"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","file":"static/js/gloableDrawer.85e23bc7.chunk.js","sourcesContent":["import React, { PureComponent, Suspense, lazy } from 'react';\r\nimport { Modal, Drawer } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ResponsiveContext } from \"../contexts/Responsive\";\r\nimport { drawerState, drawerData } from '../selectors';\r\nimport { closeDrawer } from '../actions';\r\n\r\nimport FallbackLoading from './FallbackLoading';\r\n\r\nconst Set = lazy(() => import('./Set' /* webpackChunkName: \"set\" */));\r\nconst AddSet = lazy(() => import('./AddSet' /* webpackChunkName: \"addSet\" */));\r\nconst EditSet = lazy(() => import('./EditSet' /* webpackChunkName: \"editSet\" */));\r\nconst AddAttribute = lazy(() => import('./AddAttribute' /* webpackChunkName: \"addAttribute\" */));\r\nconst EditAttribute = lazy(() => import('./EditAttribute' /* webpackChunkName: \"editAttribute\" */));\r\n\r\nconst confirm = Modal.confirm;\r\n\r\nclass GloableDrawer extends PureComponent {\r\n    \r\n    canClose = () => true; \r\n\r\n    onClose = () => null; \r\n\r\n    getContent = (props) => {    \r\n        this.canClose = () => true;\r\n        if(!props.visible) return [null, null];\r\n\r\n        const { data } = props;\r\n\r\n        if(data.type === 'set') {\r\n            return [\r\n                `Edit \"${data.set.name}\" set`, \r\n                <Set \r\n                    {...data} \r\n                    close={this.close} \r\n                    canClose={ state => (this.canClose = state) } \r\n                    onClose={ func => (this.onClose = func ) }\r\n                />\r\n            ];\r\n        } else if(data.type === 'addSet') {\r\n            return [\r\n                `Add Set`, \r\n                <AddSet \r\n                    {...data}\r\n                    close={this.close} \r\n                    canClose={ state => (this.canClose = state) } \r\n                    onClose={ func => (this.onClose = func ) }\r\n                />\r\n            ];\r\n        } else if(data.type === 'editSet') {\r\n            return [\r\n                `Edit Set`, \r\n                <EditSet \r\n                    {...data}\r\n                    close={this.close} \r\n                    canClose={ state => (this.canClose = state) } \r\n                    onClose={ func => (this.onClose = func ) }\r\n                />\r\n            ];\r\n        } else if(data.type === 'addAttribute') {\r\n            return [\r\n                `Add Attribute`, \r\n                <AddAttribute \r\n                    {...data}\r\n                    close={this.close} \r\n                    canClose={ state => (this.canClose = state) } \r\n                    onClose={ func => (this.onClose = func ) }\r\n                />\r\n            ];\r\n        } else if(data.type === 'editAttribute') {\r\n            return [\r\n                `Edit Attribute`, \r\n                <EditAttribute \r\n                    {...data}\r\n                    close={this.close} \r\n                    canClose={ state => (this.canClose = state) } \r\n                    onClose={ func => (this.onClose = func ) }\r\n                />\r\n            ];\r\n        } else {\r\n            return [null , null];\r\n        }        \r\n    }\r\n\r\n    close = () => {\r\n        if(this.canClose()) {\r\n            this.onClose();\r\n            this.props.dispatch(closeDrawer());\r\n        } else {\r\n            confirm({\r\n                title: 'Are you sure to close this task?',\r\n                content: 'You have unsaved data.',\r\n                okText: 'Yes',\r\n                okType: 'danger',\r\n                cancelText: 'No',\r\n                onOk: () => {\r\n                    this.onClose();\r\n                    this.props.dispatch(closeDrawer());\r\n                },\r\n                onCancel() {                  \r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const [title, content] = this.getContent(this.props);\r\n        return (\r\n            <ResponsiveContext.Consumer>\r\n                {(size) => (\r\n                    <Drawer\r\n                        title={title}\r\n                        placement=\"right\"\r\n                        closable={false}\r\n                        width={size === 'small'? '90%': '65%'}               \r\n                        onClose={this.close}\r\n                        visible={this.props.visible}\r\n                    >\r\n                        <Suspense fallback={<FallbackLoading />}>\r\n                            {this.props.visible ? content: null }\r\n                        </Suspense>\r\n                    </Drawer>\r\n                )}\r\n            </ResponsiveContext.Consumer>\r\n        )\r\n    }\r\n} \r\n\r\nconst mapStateToProps  = (state) => {\r\n    return {\r\n        visible: drawerState(state),\r\n        data: drawerData(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(GloableDrawer);"],"sourceRoot":""}